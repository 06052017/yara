{"name":"YARA","tagline":"A malware identification and classification tool","body":"## YARA in a nutshell\r\n\r\nYARA is a tool aimed at helping malware researchers to identify and classify malware \r\nsamples. With YARA you can create descriptions of malware families based on textual or \r\nbinary patterns contained on samples of those families. Each description consists of a set of strings and a Boolean expression which determines its logic. Let's see an example:\r\n\r\n```\r\nrule silent_banker : banker\r\n{\r\n    meta:                                        \r\n        description = \"This is just an example\"\r\n        thread_level = 3\r\n        in_the_wild = true\r\n\r\n    strings: \r\n        $a = {6A 40 68 00 30 00 00 6A 14 8D 91}  \r\n        $b = {8D 4D B0 2B C1 83 C0 27 99 6A 4E 59 F7 F9}\r\n        $c = \"UVODFRYSIHLNWPEJXQZAKCBGMT\"\r\n\r\n    condition:\r\n        $a or $b or $c\r\n}\r\n```\r\n\r\nThe rule above is telling YARA that any file containing one of the three strings must be reported as *silent_banker*.\r\n\r\nThis is just a simple example, more complex and powerful rules can be created by using binary strings with wild-cards, case-insensitive text strings, special operators, regular expressions and many other features that you can find explained in [YARA's documentation](http://yara-project.googlecode.com/files/YARA%20User%27s%20Manual%201.6.pdf).\r\n\r\nYARA is multi-platform, running on Windows, Linux and Mac OS X, and can be used through its command-line interface or from your own Python scripts with the yara-python extension. \r\n\r\nPython users can also use [yara-ctyles](https://github.com/mjdorma/yara-ctypes) by Michael Dorman. He has also written a multi-threaded command-line YARA scanner based on yara-ctypes that can exploit the benefits of current multi-core CPUs when scanning big file collections.\r\n\r\nIf you are a Ruby user you can use [yara-ruby](https://github.com/SpiderLabs/yara-ruby), written by Eric Monti. \r\n\r\n## Who's using YARA\r\n\r\n\r\n* [VirusTotal Intelligence](https://www.virustotal.com/intelligence/)\r\n* [jsunpack-n](http://jsunpack.jeek.org/)\r\n* [We Watch Your Website](http://www.wewatchyourwebsite.com/)\r\n* [FireEye, Inc.](http://www.fireeye.com)\r\n* [Fidelis XPS](http://www.fidelissecurity.com/network-security-appliance/Fidelis-XPS)\r\n* [RSA ECAT](http://www.emc.com/security/rsa-ecat.htm)\r\n\r\n## Releases\r\n\r\n### 1.7 (29/03/2013)\r\n* faster compilation\r\n* added suport for modulus (%) and bitwise xor (|) operators\r\n* better hashing of regular expressions\r\n* BUGFIX: yara-python segfault when using dir() on Rules and Match classes\r\n* BUGFIX: Integer overflow causing infinite loop\r\n* BUGFIX: Handling strings containing \\x00 characters correctly\r\n* BUGFIX: Regular expressions not matching at the end of the file when compiled with RE2\r\n* BUGFIX: Memory leaks\r\n* BUGFIX: File handle leaks\r\n\r\n### 1.6 (04/08/2011)\r\n* added support for bitwise operators\r\n* added support for multi-line hex strings\r\n* scan speed improvement for regular expressions (with PCRE)\r\n* yara-python ported to Python 3.x\r\n* yara-python support for 64-bits Python under Windows\r\n* BUGFIX: Buffer overflow in error printing\r\n\r\n### 1.5 (22/03/2011)\r\n* added -l parameter to abort scanning after a number of matches\r\n* added support for scanning processes memory\r\n* entrypoint now works with ELF as well as PE files\r\n* added support for linking with the faster RE2 library (http://code.google.com/p/re2/) instead of PCRE\r\n* implemented index operator to access offsets where string was found\r\n* implemented new operator \"for < quantifier > < variable > in < set or range > : (< expression >) \"\r\n* BUGFIX: Memory leaks in yara-python\r\n* BUGFIX: yara.compile namespaces not working with filesources\r\n\r\n### 1.4 (13/05/2010)\r\n* added external variables\r\n* scan speed improvements\r\n* added fast scan mode\r\n* BUGFIX: crash in 64-bits Windows\r\n\r\n### 1.3 (26/10/2009)\r\n* added a C-like \"include\" directive\r\n* added support for multi-sources compilation in yara-python\r\n* added support for metadata declaration in rules\r\n* BUGFIX: Incorrect handling of single-line comments at the end of the file\r\n* BUGFIX: Integer underflow when scanning files of size <= 2 bytesversion 1.0 (24/09/2008)\r\n* first release\r\n\r\n### 1.2.1 (14/04/2009)\r\n* libyara: added support for compiling rules directly from memory\r\n* libyara: interface refactored\r\n* libyara: is thread-safe now\r\n* BUGFIX: Invoking pcre_compile with non-terminated string\r\n* BUGFIX: Underscore not recognized in string identifiers\r\n* BUGFIX: Memory leak\r\n* BUGFIX: Access violation on xxcompare functionsversion 1.1 (05/01/2009)\r\n* added support for strings containing null (\\x00) chars\r\n* added syntactic construct \"x of them\" \t\r\n* regular expressions syntax changed\r\n* now regular expressions can begin with any character\r\n\r\n### 1.2 (13/01/2009)\r\n* added support for global rules\r\n* added support for declaring alternative sub-strings in hex strings\r\n* added support for anonymous strings\r\n* added support for intXX and uintXX functions\r\n* operator \"of\" was enhanced\r\n* implemented new operator \"for..of\"\r\n* \"widechar\" is now \"wide\" and can be used in conjuntion with \"ascii\"\r\n* improved syntax error reporting in yara-python\r\n* \"compile\" method in yara-python was enhanced\r\n* \"matchfile\" method in yara-python was substituted by \"match\"\r\n* some performance improvements\t\r\n* BUGFIX: Wrong behavior of escaped characters in regular expressions\r\n* BUGFIX: Fatal error in yara-python when invoking matchfile with invalid path twice\r\n* BUGFIX: Wrong precedence of OR and AND operators\r\n* BUGFIX: Access violation when scanning MZ files with e_lfanew == -1\r\n* BUGFIX: Incorrect handling of hex strings in lexer\r\n\r\n### 1.0 (24/09/2008)\r\n* first release\r\n\t\r\n\t\r\n\r\n\t\r\n\r\n\r\n\r\n\t\r\n\r\n\t\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}